type TestCase{
  testCaseName: String
  created: String
  cid: String
  httpReq: HttpReq
  httpResp: HttpResp
  noise: [String!]
  mocks: [Mock]
  type: String
}

type HttpReq {
  method: Method
  protoMajor: Int
  protoMinor: Int
  url: String
  urlParams: [KV]
  header: [KV]
  body: String
  bodyType: String
  binary: String
  form: [FormData]
}

type HttpResp {
  statusCode: Int
  header: [KV]
  body: String
  bodyType: String
  statusMessage: String
  protoMajor: Int
  protoMinor: Int
  binary: String
}


type FormData {
  key: String
  values: [String]
  paths: [String]
}

type Mock {
  version: Version
  kind: Kind
  mockName: String
  spec: String
}

type TestSuite {
  testSuiteName: String
  testSuitePath: String
}

type TestReport {
  id: String
  version: Version
  name: String
  status: String
  success: Int
  failure: Int
  total: Int
  tests: [Test]
}

type Test {
  status: TestStatus
  started: String
  completed: String
  testCaseId: String
  uri: String
  req: HttpReq
  http_resp: HttpResp
  noise: [String]
  result: Result
}

type Result {
  statusCode: IntResult
  headersResult: [HeaderResult]
  bodyResult: [BodyResult]
  mockResult: [mockResult]
}

type BodyResult {
  type: String
  normal: Boolean
  expected: String
  actual: String
}

type mockResult {
  name: String
  type: mockType
  meta: [mockMetaResult]
}

type mockMetaResult {
  normal: Boolean
  key: String
  expected: String
  actual: String
}

type IntResult {
  normal: Boolean
  expected: Int
  actual: Int
}

type HeaderResult {
  normal: Boolean
  expected: Header
  actual: Header
}

type Header {
  key: String
  value: [String]
}

type MetaKeyValue {
  key: String
  value: String
}

enum mockType {
  NoSqlDB
  SqlDB
  GRPC
  HttpClient
}

enum TestStatus {
  Pending
  Running
  Failed
  Passed
}

type KV {
  key: String
  value: String
}

enum Version {
  V1Beta1
  V1Beta2
}

enum Method {
  GET
  PUT
  HEAD
  POST
  PATCH
  DELETE
  OPTIONS
  TRACE
}

enum Kind {
  HTTP
  GENERIC
  SQL
  GRPC_EXPORT
}

type Query {
  testSuites: [TestSuite]
  testCases(testSuiteName:  ID!): [TestCase]
  testCase(testCaseId: ID!): TestCase
  testReports: [TestReport]
  testReport(testSuiteName: ID! testReportId: ID!): TestReport
  testReportCase(testCaseId: ID!): [Test]
}



