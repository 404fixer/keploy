package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"
	"fmt"
	"strconv"

	"go.keploy.io/server/graph/graph/model"
)
var DEFAULT_STRING = "Keploy-Default"
var DEFAULT_INT = 0

// TestSuites is the resolver for the testSuites field.
func (r *queryResolver) TestSuites(ctx context.Context) ([]*model.TestSuite, error) {
	testSuiteNames := []string{"e2e", "Keploy1", "Keploy2", "Keploy3"}
	defaultPath := "/Keploy/tests"
	var testSuites []*model.TestSuite
	for _, name := range testSuiteNames {
		path := defaultPath + "/" + name
		testSuite := &model.TestSuite{
			Name: &name,
			Path: &(path),
		}
		testSuites = append(testSuites, testSuite)
	}
	return testSuites, nil
}

// TestCases is the resolver for the testCases field.
func (r *queryResolver) TestCases(ctx context.Context) ([]*model.TestCase, error) {
	yaml := r.Yaml
	yaml.TcsPath = "../Keploy/tests"
	tcs, err := yaml.Read(nil)
	if err != nil {
		return nil, err
	}
	var testCases []*model.TestCase
	//Convert to *model.TestCaseData

	for _, tc := range tcs {
		newTc := &model.TestCase{
			ID:       &DEFAULT_STRING,
			Created:  convertStringToPointer(strconv.FormatInt(tc.Created, 10)),
			Updated:  convertStringToPointer(strconv.FormatInt(tc.Updated, 10)),
			Captured: convertStringToPointer(strconv.FormatInt(tc.Captured, 10)),
			Cid:      &DEFAULT_STRING,
			AppID:    &DEFAULT_STRING,
			URI:      &DEFAULT_STRING,
			HTTPReq: &model.HTTPReq{
				Method:     (*model.Method)(&tc.HttpReq.Method),
				ProtoMajor: convertInttoPointer(tc.HttpReq.ProtoMajor),
				ProtoMinor: convertInttoPointer(tc.HttpReq.ProtoMinor),
				URL:        convertStringToPointer(tc.HttpReq.URL),
				URLParams:  convertToKV(tc.HttpReq.URLParams),
				Header:     convertToKV(tc.HttpReq.Header),
				Body:       convertStringToPointer(tc.HttpReq.Body),
				BodyType:   convertStringToPointer(tc.HttpReq.BodyType),
				Binary:     convertStringToPointer(tc.HttpReq.Binary),
				Form:       convertToFormData(tc.HttpReq.Form),
			},
			HTTPResp: &model.HTTPResp{
				ProtoMajor:    convertInttoPointer(tc.HttpResp.ProtoMajor),
				ProtoMinor:    convertInttoPointer(tc.HttpResp.ProtoMinor),
				StatusCode:    convertInttoPointer(tc.HttpResp.StatusCode),
				Header:        convertToKV(tc.HttpResp.Header),
				Body:          convertStringToPointer(tc.HttpResp.Body),
				BodyType:      convertStringToPointer(tc.HttpResp.BodyType),
				Binary:        convertStringToPointer(tc.HttpResp.Binary),
				StatusMessage: convertStringToPointer(tc.HttpResp.StatusMessage),
			},
			GrpcReq:  &model.GrpcReq{},
			GrpcResp: &model.GrpcResp{},
			Deps:     []*model.Dependency{},
			AllKeys:  convertToArrayKV(tc.AllKeys),
			Anchors:  convertToArrayKV(tc.Anchors),
			Noise:    tc.Noise,
			Mocks:    convertMocks(tc.Mocks),
			Type:     convertStringToPointer(tc.Type),
		}
		testCases = append(testCases, newTc)
	}

	return testCases, nil
}

// TestCase is the resolver for the testCase field.
func (r *queryResolver) TestCase(ctx context.Context, testCaseID string) (*model.TestCase, error) {
	panic(fmt.Errorf("not implemented: TestCase - testCase"))
}

// TestReports is the resolver for the testReports field.
func (r *queryResolver) TestReports(ctx context.Context) ([]*model.TestReport, error) {
	panic(fmt.Errorf("not implemented: TestReports - testReports"))
}

// TestReport is the resolver for the testReport field.
func (r *queryResolver) TestReport(ctx context.Context, testReportID string) (*model.TestReport, error) {
	testRep, err := r.TestReportID.Read(ctx, "./../Keploy/testReports", testReportID)
	if err != nil {
		return nil, err
	}
	var testReport *model.TestReport
	testReport = &model.TestReport{
		ID:           &testReportID,
		Version:      (*model.Version)(&testRep.Version),
		Kind:         (*model.Kind)(&DEFAULT_STRING),
		Name:         &testRep.Name,
		Status:       &testRep.Status,
		Success:      &testRep.Success,
		Completed:    &DEFAULT_INT,
		Started:      &DEFAULT_INT,
		Failure:      &testRep.Failure,
		Total:        &testRep.Total,
		TestCasePath: &DEFAULT_STRING,
		MockPath:     &DEFAULT_STRING,
		Tests:        convertModelsTests(testRep.Tests),
	}
	return testReport, nil
}

// TestReportCase is the resolver for the testReportCase field.
func (r *queryResolver) TestReportCase(ctx context.Context, testCaseID string) ([]*model.Test, error) {
	panic(fmt.Errorf("not implemented: TestReportCase - testReportCase"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
