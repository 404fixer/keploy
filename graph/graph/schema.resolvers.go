package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"strconv"
	"errors"

	"go.keploy.io/server/graph/graph/model"
	"go.keploy.io/server/pkg/platform/fs"
)

// TestSuites is the resolver for the testSuites field.
func (r *queryResolver) TestSuites(ctx context.Context) ([]*model.TestSuite, error) {
	histCfgList := getHistCfg()
	var testSuites []*model.TestSuite
	for i, cfg := range histCfgList {
		name := "TestSuite" + strconv.Itoa(i+1)
		path := cfg.TcPath
		newTestSuite := &model.TestSuite{
			TestSuiteName: &name,
			TestSuitePath: &path,
		}
		testSuites = append(testSuites, newTestSuite)
	}
	return testSuites, nil
}

// TestCases is the resolver for the testCases field.
func (r *queryResolver) TestCases(ctx context.Context, testSuiteName string) ([]*model.TestCase, error) {
	histCfgList := getHistCfg()
	var path string
	testSuiteIndex := string(testSuiteName[len(testSuiteName)-1])
	testSuiteIndexInt := int(testSuiteIndex[0] - '0')  - 1
	if testSuiteIndexInt > len(histCfgList) || testSuiteIndexInt < 0 {
		return nil, errors.New("TestSuite not found")
	}
	path = histCfgList[testSuiteIndexInt].TcPath
	yaml := r.Yaml
	yaml.TcsPath = path
	fmt.Println(path)
	tcs, err := yaml.Read(nil)
	if err != nil {
		return nil, err
	}
	var testCases []*model.TestCase
	//Convert to *model.TestCaseData
	for i, tc := range tcs {
		name := "test-" + strconv.Itoa(i+1)
		newTc := &model.TestCase{
			TestCaseName: &name,
			Created:      convertStringToPointer(strconv.FormatInt(tc.Created, 10)),
			Cid:          &DEFAULT_STRING,
			HTTPReq: &model.HTTPReq{
				Method:     (*model.Method)(&tc.HttpReq.Method),
				ProtoMajor: convertInttoPointer(tc.HttpReq.ProtoMajor),
				ProtoMinor: convertInttoPointer(tc.HttpReq.ProtoMinor),
				URL:        convertStringToPointer(tc.HttpReq.URL),
				URLParams:  convertToKV(tc.HttpReq.URLParams),
				Header:     convertToKV(tc.HttpReq.Header),
				Body:       convertStringToPointer(tc.HttpReq.Body),
				BodyType:   convertStringToPointer(tc.HttpReq.BodyType),
				Binary:     convertStringToPointer(tc.HttpReq.Binary),
				Form:       convertToFormData(tc.HttpReq.Form),
			},
			HTTPResp: &model.HTTPResp{
				ProtoMajor:    convertInttoPointer(tc.HttpResp.ProtoMajor),
				ProtoMinor:    convertInttoPointer(tc.HttpResp.ProtoMinor),
				StatusCode:    convertInttoPointer(tc.HttpResp.StatusCode),
				Header:        convertToKV(tc.HttpResp.Header),
				Body:          convertStringToPointer(tc.HttpResp.Body),
				BodyType:      convertStringToPointer(tc.HttpResp.BodyType),
				Binary:        convertStringToPointer(tc.HttpResp.Binary),
				StatusMessage: convertStringToPointer(tc.HttpResp.StatusMessage),
			},
			Noise: tc.Noise,
			Mocks: convertMocks(tc.Mocks),
			Type:  convertStringToPointer(tc.Type),
		}
		testCases = append(testCases, newTc)
	}

	return testCases, nil
}

// TestCase is the resolver for the testCase field.
func (r *queryResolver) TestCase(ctx context.Context, testCaseID string) (*model.TestCase, error) {
	panic(fmt.Errorf("not implemented: TestCase - testCase"))
}

// TestReports is the resolver for the testReports field.
func (r *queryResolver) TestReports(ctx context.Context) ([]*model.TestReport, error) {
	panic(fmt.Errorf("not implemented: TestReports - testReports"))
}

// TestReport is the resolver for the testReport field.
func (r *queryResolver) TestReport(ctx context.Context, testSuiteName string, testReportID string) (*model.TestReport, error) {
	histCfgList := getHistCfg()
	var path string
	testSuiteIndex := string(testSuiteName[len(testSuiteName)-1])
	testSuiteIndexInt := int(testSuiteIndex[0] - '0')  - 1
	if testSuiteIndexInt > len(histCfgList) || testSuiteIndexInt < 0 {
		return nil, errors.New("TestSuite not found")
	}
	path = histCfgList[testSuiteIndexInt].TcPath + "/../testReports"
	testRep, err := r.TestReportID.Read(ctx, path, testReportID)
	if err != nil {
		return nil, err
	}
	var testReport *model.TestReport
	testReport = &model.TestReport{
		ID:      &testReportID,
		Version: (*model.Version)(&testRep.Version),
		Name:    &testRep.Name,
		Status:  &testRep.Status,
		Success: &testRep.Success,
		Failure: &testRep.Failure,
		Total:   &testRep.Total,
		Tests:   convertModelsTests(testRep.Tests),
	}
	return testReport, nil
}

// TestReportCase is the resolver for the testReportCase field.
func (r *queryResolver) TestReportCase(ctx context.Context, testCaseID string) ([]*model.Test, error) {
	panic(fmt.Errorf("not implemented: TestReportCase - testReportCase"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var DEFAULT_STRING = "Keploy-Default"
var DEFAULT_INT = 0

type HistCfgList struct {
	HistCfgs []fs.HistCfg `yaml:"HistCfgs"`
}
